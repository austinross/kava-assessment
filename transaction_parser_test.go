package main

import (
	"container/heap"
	"reflect"
	"strings"
	"testing"
)

var expectedStrings = []string{
	"TxHash=F4F6580BB142004E80EC3198B4EDBE48DA83299E12A9F7E3E65AC5AC217D7B6F Gas=748000 FeePerGas=9.556431783046658e-05 Signature=EE95A1DA2BFC62FC2D885DA58B51866BE6EBB846AD8D0915A1DBB8B44BB1A63200ECAD70E2261936856F5CFB096D5B4FF7DF07097FA717DD5E7F7520F51E06AE",
	"TxHash=DC47D1A6BF36202FC54BF25D86B4D232599B047E9E03ABFBA1F3DED5BB55BFBF Gas=540000 FeePerGas=0.8761154783254219 Signature=4E2052F4BEDDE9A36C3F576BCE42851A6B60D278BA25F0BF2FB7BB00327D3CEA1F64E9EED28DDA4E30B2F0B2EC2E6086DBC999D4AFC551FC843A00FC550997D8",
	"TxHash=C39C4CA2A77B721CFBEAFF1A3613A4F960965C4CC1E1A8B2D136E2B603F094F4 Gas=709000 FeePerGas=0.8842448452148521 Signature=7585E48755D5683E0A8F3A64DE14FFE80B2778EC5D4CBA8CFC0847AB81929D4153722C289880048DC3142E71884FE0037C78D3A2F9CD53B283F5D0E92A8666E6",
}

var expectedMp = &Mempool{
	&Transaction{
		hash:      "F4F6580BB142004E80EC3198B4EDBE48DA83299E12A9F7E3E65AC5AC217D7B6F",
		gas:       748000,
		feePerGas: 0.000096,
		signature: "EE95A1DA2BFC62FC2D885DA58B51866BE6EBB846AD8D0915A1DBB8B44BB1A63200ECAD70E2261936856F5CFB096D5B4FF7DF07097FA717DD5E7F7520F51E06AE",
	},
	&Transaction{
		hash:      "DC47D1A6BF36202FC54BF25D86B4D232599B047E9E03ABFBA1F3DED5BB55BFBF",
		gas:       540000,
		feePerGas: 0.876115,
		signature: "4E2052F4BEDDE9A36C3F576BCE42851A6B60D278BA25F0BF2FB7BB00327D3CEA1F64E9EED28DDA4E30B2F0B2EC2E6086DBC999D4AFC551FC843A00FC550997D8",
	},
	&Transaction{
		hash:      "C39C4CA2A77B721CFBEAFF1A3613A4F960965C4CC1E1A8B2D136E2B603F094F4",
		gas:       709000,
		feePerGas: 0.884245,
		signature: "7585E48755D5683E0A8F3A64DE14FFE80B2778EC5D4CBA8CFC0847AB81929D4153722C289880048DC3142E71884FE0037C78D3A2F9CD53B283F5D0E92A8666E6",
	},
}

func TestReadLines(t *testing.T) {
	lines, err := readLines("transactions-test.txt")
	if err != nil {
		t.Errorf("Could not read in file: %s", err)
	}
	if !reflect.DeepEqual(lines, expectedStrings) {
		t.Errorf("readLines() expected: %+v, result %+v", expectedStrings, lines)
	}

	_, err = readLines("")
	if err == nil {
		t.Errorf("readLines() Error expected")
	}
}

func TestWriteLines(t *testing.T) {
	if err := writeLines("output-test.txt", expectedMp.ToStrings()); err != nil {
		t.Errorf("Could not write to file: %s", err)
	}

	if err := writeLines("", mp.ToStrings()); err == nil {
		t.Errorf("writeLines() Error expected")
	}
}

func TestConvertLinesToMempool(t *testing.T) {
	// Testing max size mempool
	tooManyStrings := append(expectedStrings, "TxHash=5ECFB62E8D1BAE46FD8CB5B0436EF7912464509C32F80DBAF35FAB524E3379A9 Gas=815000 FeePerGas=0.5728873475545326 Signature=E3E4B226CCFB646C9970FE7E719211DD799642086E963F28F4985D73EE287CF451E36348687BE1F8FD888200C64E1C009180217F7AFD61D16AD6FF87BF56E9E3")
	expectedMp := &Mempool{
		&Transaction{
			hash:      "DC47D1A6BF36202FC54BF25D86B4D232599B047E9E03ABFBA1F3DED5BB55BFBF",
			gas:       540000,
			feePerGas: 0.876115,
			signature: "4E2052F4BEDDE9A36C3F576BCE42851A6B60D278BA25F0BF2FB7BB00327D3CEA1F64E9EED28DDA4E30B2F0B2EC2E6086DBC999D4AFC551FC843A00FC550997D8",
		},
		&Transaction{
			hash:      "5ECFB62E8D1BAE46FD8CB5B0436EF7912464509C32F80DBAF35FAB524E3379A9",
			gas:       815000,
			feePerGas: 0.572887,
			signature: "E3E4B226CCFB646C9970FE7E719211DD799642086E963F28F4985D73EE287CF451E36348687BE1F8FD888200C64E1C009180217F7AFD61D16AD6FF87BF56E9E3",
		},
		&Transaction{
			hash:      "C39C4CA2A77B721CFBEAFF1A3613A4F960965C4CC1E1A8B2D136E2B603F094F4",
			gas:       709000,
			feePerGas: 0.884245,
			signature: "7585E48755D5683E0A8F3A64DE14FFE80B2778EC5D4CBA8CFC0847AB81929D4153722C289880048DC3142E71884FE0037C78D3A2F9CD53B283F5D0E92A8666E6",
		},
	}

	newMp := convertLinesToMempool(tooManyStrings, 3)
	heap.Init(newMp)
	heap.Init(expectedMp)
	for range *expectedMp {
		result := heap.Pop(newMp).(*Transaction)
		expected := heap.Pop(expectedMp).(*Transaction)
		if result.hash != expected.hash {
			t.Errorf("convertLinesToMempool expected: %+v\n result: %+v\n", expected, result)
			break
		}
	}
}

func TestCreateTransaction(t *testing.T) {
	parts := strings.Fields(expectedStrings[0])
	transaction := createTransaction(parts)

	expectedTransaction := Transaction{
		hash:      "F4F6580BB142004E80EC3198B4EDBE48DA83299E12A9F7E3E65AC5AC217D7B6F",
		gas:       748000,
		feePerGas: 0.000096,
		signature: "EE95A1DA2BFC62FC2D885DA58B51866BE6EBB846AD8D0915A1DBB8B44BB1A63200ECAD70E2261936856F5CFB096D5B4FF7DF07097FA717DD5E7F7520F51E06AE",
	}

	if transaction.hash != expectedTransaction.hash {
		t.Errorf("createTransaction() expected: %+v, result: %+v", expectedTransaction, transaction)
	}
}
